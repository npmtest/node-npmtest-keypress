{"/home/travis/build/npmtest/node-npmtest-keypress/test.js":"/* istanbul instrument in package npmtest_keypress */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-keypress/lib.npmtest_keypress.js":"/* istanbul instrument in package npmtest_keypress */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_keypress = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_keypress = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-keypress/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-keypress && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_keypress */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_keypress\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_keypress.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_keypress.rollup.js'] =\n            local.assetsDict['/assets.npmtest_keypress.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_keypress.__dirname + '/lib.npmtest_keypress.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-keypress/node_modules/keypress/index.js":"\n/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('events').EventEmitter;\n\n/**\n * Module exports.\n */\n\nvar exports = module.exports = keypress;\n\n/**\n * This module offers the internal \"keypress\" functionality from node-core's\n * `readline` module, for your own programs and modules to use.\n *\n * The `keypress` function accepts a readable Stream instance and makes it\n * emit \"keypress\" events.\n *\n * Usage:\n *\n * ``` js\n * require('keypress')(process.stdin);\n *\n * process.stdin.on('keypress', function (ch, key) {\n *   console.log(ch, key);\n *   if (key.ctrl && key.name == 'c') {\n *     process.stdin.pause();\n *   }\n * });\n * proces.stdin.resume();\n * ```\n *\n * @param {Stream} stream\n * @api public\n */\n\nfunction keypress(stream) {\n  if (isEmittingKeypress(stream)) return;\n\n  var StringDecoder = require('string_decoder').StringDecoder; // lazy load\n  stream._keypressDecoder = new StringDecoder('utf8');\n\n  function onData(b) {\n    if (listenerCount(stream, 'keypress') > 0) {\n      var r = stream._keypressDecoder.write(b);\n      if (r) emitKey(stream, r);\n    } else {\n      // Nobody's watching anyway\n      stream.removeListener('data', onData);\n      stream.on('newListener', onNewListener);\n    }\n  }\n\n  function onNewListener(event) {\n    if (event == 'keypress') {\n      stream.on('data', onData);\n      stream.removeListener('newListener', onNewListener);\n    }\n  }\n\n  if (listenerCount(stream, 'keypress') > 0) {\n    stream.on('data', onData);\n  } else {\n    stream.on('newListener', onNewListener);\n  }\n}\n\n/**\n * Returns `true` if the stream is already emitting \"keypress\" events.\n * `false` otherwise.\n *\n * @param {Stream} stream readable stream\n * @return {Boolean} `true` if the stream is emitting \"keypress\" events\n * @api private\n */\n\nfunction isEmittingKeypress(stream) {\n  var rtn = !!stream._keypressDecoder;\n  if (!rtn) {\n    // XXX: for older versions of node (v0.6.x, v0.8.x) we want to remove the\n    // existing \"data\" and \"newListener\" keypress events since they won't include\n    // this `keypress` module extensions (like \"mousepress\" events).\n    stream.listeners('data').slice(0).forEach(function(l) {\n      if (l.name == 'onData' && /emitKey/.test(l.toString())) {\n        stream.removeListener('data', l);\n      }\n    });\n    stream.listeners('newListener').slice(0).forEach(function(l) {\n      if (l.name == 'onNewListener' && /keypress/.test(l.toString())) {\n        stream.removeListener('newListener', l);\n      }\n    });\n  }\n  return rtn;\n}\n\n/**\n * Enables \"mousepress\" events on the *input* stream. Note that `stream` must be\n * an *output* stream (i.e. a Writable Stream instance), usually `process.stdout`.\n *\n * @param {Stream} stream writable stream instance\n * @api public\n */\n\nexports.enableMouse = function (stream) {\n  stream.write('\\x1b[?1000h');\n};\n\n/**\n * Disables \"mousepress\" events from being sent to the *input* stream.\n * Note that `stream` must be an *output* stream (i.e. a Writable Stream instance),\n * usually `process.stdout`.\n *\n * @param {Stream} stream writable stream instance\n * @api public\n */\n\nexports.disableMouse = function (stream) {\n  stream.write('\\x1b[?1000l');\n};\n\n/**\n * `EventEmitter.listenerCount()` polyfill, for backwards compat.\n *\n * @param {Emitter} emitter event emitter instance\n * @param {String} event event name\n * @return {Number} number of listeners for `event`\n * @api public\n */\n\nvar listenerCount = EventEmitter.listenerCount;\nif (!listenerCount) {\n  listenerCount = function(emitter, event) {\n    return emitter.listeners(event).length;\n  };\n}\n\n\n///////////////////////////////////////////////////////////////////////\n// Below this function is code from node-core's `readline.js` module //\n///////////////////////////////////////////////////////////////////////\n\n\n/*\n  Some patterns seen in terminal key escape codes, derived from combos seen\n  at http://www.midnight-commander.org/browser/lib/tty/key.c\n\n  ESC letter\n  ESC [ letter\n  ESC [ modifier letter\n  ESC [ 1 ; modifier letter\n  ESC [ num char\n  ESC [ num ; modifier char\n  ESC O letter\n  ESC O modifier letter\n  ESC O 1 ; modifier letter\n  ESC N letter\n  ESC [ [ num ; modifier char\n  ESC [ [ 1 ; modifier letter\n  ESC ESC [ num char\n  ESC ESC O letter\n\n  - char is usually ~ but $ and ^ also happen with rxvt\n  - modifier is 1 +\n                (shift     * 1) +\n                (left_alt  * 2) +\n                (ctrl      * 4) +\n                (right_alt * 8)\n  - two leading ESCs apparently mean the same as one leading ESC\n*/\n\n// Regexes used for ansi escape code splitting\nvar metaKeyCodeRe = /^(?:\\x1b)([a-zA-Z0-9])$/;\nvar functionKeyCodeRe =\n    /^(?:\\x1b+)(O|N|\\[|\\[\\[)(?:(\\d+)(?:;(\\d+))?([~^$])|(?:1;)?(\\d+)?([a-zA-Z]))/;\n\nfunction emitKey(stream, s) {\n  var ch,\n      key = {\n        name: undefined,\n        ctrl: false,\n        meta: false,\n        shift: false\n      },\n      parts;\n\n  if (Buffer.isBuffer(s)) {\n    if (s[0] > 127 && s[1] === undefined) {\n      s[0] -= 128;\n      s = '\\x1b' + s.toString(stream.encoding || 'utf-8');\n    } else {\n      s = s.toString(stream.encoding || 'utf-8');\n    }\n  }\n\n  key.sequence = s;\n\n  if (s === '\\r') {\n    // carriage return\n    key.name = 'return';\n\n  } else if (s === '\\n') {\n    // enter, should have been called linefeed\n    key.name = 'enter';\n\n  } else if (s === '\\t') {\n    // tab\n    key.name = 'tab';\n\n  } else if (s === '\\b' || s === '\\x7f' ||\n             s === '\\x1b\\x7f' || s === '\\x1b\\b') {\n    // backspace or ctrl+h\n    key.name = 'backspace';\n    key.meta = (s.charAt(0) === '\\x1b');\n\n  } else if (s === '\\x1b' || s === '\\x1b\\x1b') {\n    // escape key\n    key.name = 'escape';\n    key.meta = (s.length === 2);\n\n  } else if (s === ' ' || s === '\\x1b ') {\n    key.name = 'space';\n    key.meta = (s.length === 2);\n\n  } else if (s <= '\\x1a') {\n    // ctrl+letter\n    key.name = String.fromCharCode(s.charCodeAt(0) + 'a'.charCodeAt(0) - 1);\n    key.ctrl = true;\n\n  } else if (s.length === 1 && s >= 'a' && s <= 'z') {\n    // lowercase letter\n    key.name = s;\n\n  } else if (s.length === 1 && s >= 'A' && s <= 'Z') {\n    // shift+letter\n    key.name = s.toLowerCase();\n    key.shift = true;\n\n  } else if (parts = metaKeyCodeRe.exec(s)) {\n    // meta+character key\n    key.name = parts[1].toLowerCase();\n    key.meta = true;\n    key.shift = /^[A-Z]$/.test(parts[1]);\n\n  } else if (parts = functionKeyCodeRe.exec(s)) {\n    // ansi escape sequence\n\n    // reassemble the key code leaving out leading \\x1b's,\n    // the modifier key bitflag and any meaningless \"1;\" sequence\n    var code = (parts[1] || '') + (parts[2] || '') +\n               (parts[4] || '') + (parts[6] || ''),\n        modifier = (parts[3] || parts[5] || 1) - 1;\n\n    // Parse the key modifier\n    key.ctrl = !!(modifier & 4);\n    key.meta = !!(modifier & 10);\n    key.shift = !!(modifier & 1);\n    key.code = code;\n\n    // Parse the key itself\n    switch (code) {\n      /* xterm/gnome ESC O letter */\n      case 'OP': key.name = 'f1'; break;\n      case 'OQ': key.name = 'f2'; break;\n      case 'OR': key.name = 'f3'; break;\n      case 'OS': key.name = 'f4'; break;\n\n      /* xterm/rxvt ESC [ number ~ */\n      case '[11~': key.name = 'f1'; break;\n      case '[12~': key.name = 'f2'; break;\n      case '[13~': key.name = 'f3'; break;\n      case '[14~': key.name = 'f4'; break;\n\n      /* from Cygwin and used in libuv */\n      case '[[A': key.name = 'f1'; break;\n      case '[[B': key.name = 'f2'; break;\n      case '[[C': key.name = 'f3'; break;\n      case '[[D': key.name = 'f4'; break;\n      case '[[E': key.name = 'f5'; break;\n\n      /* common */\n      case '[15~': key.name = 'f5'; break;\n      case '[17~': key.name = 'f6'; break;\n      case '[18~': key.name = 'f7'; break;\n      case '[19~': key.name = 'f8'; break;\n      case '[20~': key.name = 'f9'; break;\n      case '[21~': key.name = 'f10'; break;\n      case '[23~': key.name = 'f11'; break;\n      case '[24~': key.name = 'f12'; break;\n\n      /* xterm ESC [ letter */\n      case '[A': key.name = 'up'; break;\n      case '[B': key.name = 'down'; break;\n      case '[C': key.name = 'right'; break;\n      case '[D': key.name = 'left'; break;\n      case '[E': key.name = 'clear'; break;\n      case '[F': key.name = 'end'; break;\n      case '[H': key.name = 'home'; break;\n\n      /* xterm/gnome ESC O letter */\n      case 'OA': key.name = 'up'; break;\n      case 'OB': key.name = 'down'; break;\n      case 'OC': key.name = 'right'; break;\n      case 'OD': key.name = 'left'; break;\n      case 'OE': key.name = 'clear'; break;\n      case 'OF': key.name = 'end'; break;\n      case 'OH': key.name = 'home'; break;\n\n      /* xterm/rxvt ESC [ number ~ */\n      case '[1~': key.name = 'home'; break;\n      case '[2~': key.name = 'insert'; break;\n      case '[3~': key.name = 'delete'; break;\n      case '[4~': key.name = 'end'; break;\n      case '[5~': key.name = 'pageup'; break;\n      case '[6~': key.name = 'pagedown'; break;\n\n      /* putty */\n      case '[[5~': key.name = 'pageup'; break;\n      case '[[6~': key.name = 'pagedown'; break;\n\n      /* rxvt */\n      case '[7~': key.name = 'home'; break;\n      case '[8~': key.name = 'end'; break;\n\n      /* rxvt keys with modifiers */\n      case '[a': key.name = 'up'; key.shift = true; break;\n      case '[b': key.name = 'down'; key.shift = true; break;\n      case '[c': key.name = 'right'; key.shift = true; break;\n      case '[d': key.name = 'left'; key.shift = true; break;\n      case '[e': key.name = 'clear'; key.shift = true; break;\n\n      case '[2$': key.name = 'insert'; key.shift = true; break;\n      case '[3$': key.name = 'delete'; key.shift = true; break;\n      case '[5$': key.name = 'pageup'; key.shift = true; break;\n      case '[6$': key.name = 'pagedown'; key.shift = true; break;\n      case '[7$': key.name = 'home'; key.shift = true; break;\n      case '[8$': key.name = 'end'; key.shift = true; break;\n\n      case 'Oa': key.name = 'up'; key.ctrl = true; break;\n      case 'Ob': key.name = 'down'; key.ctrl = true; break;\n      case 'Oc': key.name = 'right'; key.ctrl = true; break;\n      case 'Od': key.name = 'left'; key.ctrl = true; break;\n      case 'Oe': key.name = 'clear'; key.ctrl = true; break;\n\n      case '[2^': key.name = 'insert'; key.ctrl = true; break;\n      case '[3^': key.name = 'delete'; key.ctrl = true; break;\n      case '[5^': key.name = 'pageup'; key.ctrl = true; break;\n      case '[6^': key.name = 'pagedown'; key.ctrl = true; break;\n      case '[7^': key.name = 'home'; key.ctrl = true; break;\n      case '[8^': key.name = 'end'; key.ctrl = true; break;\n\n      /* misc. */\n      case '[Z': key.name = 'tab'; key.shift = true; break;\n      default: key.name = 'undefined'; break;\n\n    }\n  } else if (s.length > 1 && s[0] !== '\\x1b') {\n    // Got a longer-than-one string of characters.\n    // Probably a paste, since it wasn't a control sequence.\n    Array.prototype.forEach.call(s, function(c) {\n      emitKey(stream, c);\n    });\n    return;\n  }\n\n  // XXX: this \"mouse\" parsing code is NOT part of the node-core standard\n  // `readline.js` module, and is a `keypress` module non-standard extension.\n  if (key.code == '[M') {\n    key.name = 'mouse';\n    var s = key.sequence;\n    var b = s.charCodeAt(3);\n    key.x = s.charCodeAt(4) - 040;\n    key.y = s.charCodeAt(5) - 040;\n\n    key.scroll = 0;\n\n    key.ctrl  = !!(1<<4 & b);\n    key.meta  = !!(1<<3 & b);\n    key.shift = !!(1<<2 & b);\n\n    key.release = (3 & b) === 3;\n\n    if (1<<6 & b) { //scroll\n      key.scroll = 1 & b ? 1 : -1;\n    }\n\n    if (!key.release && !key.scroll) {\n      key.button = b & 3;\n    }\n  }\n\n  // Don't emit a key if no name was found\n  if (key.name === undefined) {\n    key = undefined;\n  }\n\n  if (s.length === 1) {\n    ch = s;\n  }\n\n  if (key && key.name == 'mouse') {\n    stream.emit('mousepress', key);\n  } else if (key || ch) {\n    stream.emit('keypress', ch, key);\n  }\n}\n"}